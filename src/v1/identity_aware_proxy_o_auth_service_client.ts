// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/identity_aware_proxy_o_auth_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './identity_aware_proxy_o_auth_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  API to programmatically create, list and retrieve Identity Aware Proxy (IAP)
 *  OAuth brands; and create, retrieve, delete and reset-secret of IAP OAuth
 *  clients.
 * @class
 * @memberof v1
 */
export class IdentityAwareProxyOAuthServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  identityAwareProxyOAuthServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IdentityAwareProxyOAuthServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof IdentityAwareProxyOAuthServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listIdentityAwareProxyClients: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'identityAwareProxyClients'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.iap.v1.IdentityAwareProxyOAuthService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.identityAwareProxyOAuthServiceStub) {
      return this.identityAwareProxyOAuthServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.iap.v1.IdentityAwareProxyOAuthService.
    this.identityAwareProxyOAuthServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.iap.v1.IdentityAwareProxyOAuthService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.iap.v1
            .IdentityAwareProxyOAuthService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const identityAwareProxyOAuthServiceStubMethods = [
      'listBrands',
      'createBrand',
      'getBrand',
      'createIdentityAwareProxyClient',
      'listIdentityAwareProxyClients',
      'getIdentityAwareProxyClient',
      'resetIdentityAwareProxyClientSecret',
      'deleteIdentityAwareProxyClient',
    ];
    for (const methodName of identityAwareProxyOAuthServiceStubMethods) {
      const callPromise = this.identityAwareProxyOAuthServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.identityAwareProxyOAuthServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'iap.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'iap.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  listBrands(
    request?: protos.google.cloud.iap.v1.IListBrandsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IListBrandsResponse,
      protos.google.cloud.iap.v1.IListBrandsRequest | undefined,
      {} | undefined
    ]
  >;
  listBrands(
    request: protos.google.cloud.iap.v1.IListBrandsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IListBrandsResponse,
      protos.google.cloud.iap.v1.IListBrandsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listBrands(
    request: protos.google.cloud.iap.v1.IListBrandsRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IListBrandsResponse,
      protos.google.cloud.iap.v1.IListBrandsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Lists the existing brands for the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. GCP Project number/id.
   *   In the following format: projects/{project_number/id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListBrandsResponse]{@link google.cloud.iap.v1.ListBrandsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.listBrands(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.list_brands.js</caption>
   * region_tag:iap_list_brands_sample
   *
   */
  listBrands(
    request?: protos.google.cloud.iap.v1.IListBrandsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IListBrandsResponse,
          protos.google.cloud.iap.v1.IListBrandsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IListBrandsResponse,
      protos.google.cloud.iap.v1.IListBrandsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IListBrandsResponse,
      protos.google.cloud.iap.v1.IListBrandsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listBrands(request, options, callback);
  }
  createBrand(
    request?: protos.google.cloud.iap.v1.ICreateBrandRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.ICreateBrandRequest | undefined,
      {} | undefined
    ]
  >;
  createBrand(
    request: protos.google.cloud.iap.v1.ICreateBrandRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.ICreateBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBrand(
    request: protos.google.cloud.iap.v1.ICreateBrandRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.ICreateBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Constructs a new OAuth brand for the project if one does not exist.
   * The created brand is "internal only", meaning that OAuth clients created
   * under it only accept requests from users who belong to the same G Suite
   * organization as the project. The brand is created in an un-reviewed status.
   * NOTE: The "internal only" status can be manually changed in the Google
   * Cloud console. Requires that a brand does not already exist for the
   * project, and that the specified support email is owned by the caller.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. GCP Project number/id under which the brand is to be created.
   *   In the following format: projects/{project_number/id}.
   * @param {google.cloud.iap.v1.Brand} request.brand
   *   Required. The brand to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Brand]{@link google.cloud.iap.v1.Brand}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.createBrand(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.create_brand.js</caption>
   * region_tag:iap_create_brand_sample
   *
   */
  createBrand(
    request?: protos.google.cloud.iap.v1.ICreateBrandRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IBrand,
          protos.google.cloud.iap.v1.ICreateBrandRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.ICreateBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.ICreateBrandRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createBrand(request, options, callback);
  }
  getBrand(
    request?: protos.google.cloud.iap.v1.IGetBrandRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.IGetBrandRequest | undefined,
      {} | undefined
    ]
  >;
  getBrand(
    request: protos.google.cloud.iap.v1.IGetBrandRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.IGetBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBrand(
    request: protos.google.cloud.iap.v1.IGetBrandRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.IGetBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Retrieves the OAuth brand of the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the brand to be fetched.
   *   In the following format: projects/{project_number/id}/brands/{brand}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Brand]{@link google.cloud.iap.v1.Brand}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getBrand(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.get_brand.js</caption>
   * region_tag:iap_get_brand_sample
   *
   */
  getBrand(
    request?: protos.google.cloud.iap.v1.IGetBrandRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IBrand,
          protos.google.cloud.iap.v1.IGetBrandRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.IGetBrandRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IBrand,
      protos.google.cloud.iap.v1.IGetBrandRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getBrand(request, options, callback);
  }
  createIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates an Identity Aware Proxy (IAP) OAuth client. The client is owned
   * by IAP. Requires that the brand for the project exists and that it is
   * set for internal-only use.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Path to create the client in.
   *   In the following format:
   *   projects/{project_number/id}/brands/{brand}.
   *   The project must belong to a G Suite account.
   * @param {google.cloud.iap.v1.IdentityAwareProxyClient} request.identityAwareProxyClient
   *   Required. Identity Aware Proxy Client to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.createIdentityAwareProxyClient(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.create_identity_aware_proxy_client.js</caption>
   * region_tag:iap_create_identity_aware_proxy_client_sample
   *
   */
  createIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
          | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.ICreateIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createIdentityAwareProxyClient(
      request,
      options,
      callback
    );
  }
  getIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Retrieves an Identity Aware Proxy (IAP) OAuth client.
   * Requires that the client is owned by IAP.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the Identity Aware Proxy client to be fetched.
   *   In the following format:
   *   projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getIdentityAwareProxyClient(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.get_identity_aware_proxy_client.js</caption>
   * region_tag:iap_get_identity_aware_proxy_client_sample
   *
   */
  getIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
          | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.IGetIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getIdentityAwareProxyClient(
      request,
      options,
      callback
    );
  }
  resetIdentityAwareProxyClientSecret(
    request?: protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  resetIdentityAwareProxyClientSecret(
    request: protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  resetIdentityAwareProxyClientSecret(
    request: protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest,
    callback: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Resets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the
   * secret was compromised. Requires that the client is owned by IAP.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the Identity Aware Proxy client to that will have its
   *   secret reset. In the following format:
   *   projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.resetIdentityAwareProxyClientSecret(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.reset_identity_aware_proxy_client_secret.js</caption>
   * region_tag:iap_reset_identity_aware_proxy_client_secret_sample
   *
   */
  resetIdentityAwareProxyClientSecret(
    request?: protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
          | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient,
      (
        | protos.google.cloud.iap.v1.IResetIdentityAwareProxyClientSecretRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.resetIdentityAwareProxyClientSecret(
      request,
      options,
      callback
    );
  }
  deleteIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteIdentityAwareProxyClient(
    request: protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes an Identity Aware Proxy (IAP) OAuth client. Useful for removing
   * obsolete clients, managing the number of clients in a given project, and
   * cleaning up after tests. Requires that the client is owned by IAP.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the Identity Aware Proxy client to be deleted.
   *   In the following format:
   *   projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.deleteIdentityAwareProxyClient(request);
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.delete_identity_aware_proxy_client.js</caption>
   * region_tag:iap_delete_identity_aware_proxy_client_sample
   *
   */
  deleteIdentityAwareProxyClient(
    request?: protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.iap.v1.IDeleteIdentityAwareProxyClientRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteIdentityAwareProxyClient(
      request,
      options,
      callback
    );
  }

  listIdentityAwareProxyClients(
    request?: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient[],
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest | null,
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
    ]
  >;
  listIdentityAwareProxyClients(
    request: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
      | protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
      | null
      | undefined,
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient
    >
  ): void;
  listIdentityAwareProxyClients(
    request: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    callback: PaginationCallback<
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
      | protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
      | null
      | undefined,
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient
    >
  ): void;
  /**
   * Lists the existing clients for the brand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full brand path.
   *   In the following format: projects/{project_number/id}/brands/{brand}.
   * @param {number} request.pageSize
   *   The maximum number of clients to return. The service may return fewer than
   *   this value.
   *   If unspecified, at most 100 clients will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListIdentityAwareProxyClients`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListIdentityAwareProxyClients` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listIdentityAwareProxyClientsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.list_identity_aware_proxy_clients.js</caption>
   * region_tag:iap_list_identity_aware_proxy_clients_sample
   *
   */
  listIdentityAwareProxyClients(
    request?: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
          | protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
          | null
          | undefined,
          protos.google.cloud.iap.v1.IIdentityAwareProxyClient
        >,
    callback?: PaginationCallback<
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
      | protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
      | null
      | undefined,
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient
    >
  ): Promise<
    [
      protos.google.cloud.iap.v1.IIdentityAwareProxyClient[],
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest | null,
      protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listIdentityAwareProxyClients(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full brand path.
   *   In the following format: projects/{project_number/id}/brands/{brand}.
   * @param {number} request.pageSize
   *   The maximum number of clients to return. The service may return fewer than
   *   this value.
   *   If unspecified, at most 100 clients will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListIdentityAwareProxyClients`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListIdentityAwareProxyClients` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listIdentityAwareProxyClientsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.list_identity_aware_proxy_clients.js</caption>
   * region_tag:iap_list_identity_aware_proxy_clients_sample
   *
   */
  listIdentityAwareProxyClientsStream(
    request?: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listIdentityAwareProxyClients'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listIdentityAwareProxyClients.createStream(
      this.innerApiCalls.listIdentityAwareProxyClients as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listIdentityAwareProxyClients`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full brand path.
   *   In the following format: projects/{project_number/id}/brands/{brand}.
   * @param {number} request.pageSize
   *   The maximum number of clients to return. The service may return fewer than
   *   this value.
   *   If unspecified, at most 100 clients will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListIdentityAwareProxyClients`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   `ListIdentityAwareProxyClients` must match the call that provided the page
   *   token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [IdentityAwareProxyClient]{@link google.cloud.iap.v1.IdentityAwareProxyClient}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listIdentityAwareProxyClientsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   *
   * @example <caption>include:samples/generated/v1/identity_aware_proxy_o_auth_service.list_identity_aware_proxy_clients.js</caption>
   * region_tag:iap_list_identity_aware_proxy_clients_sample
   *
   */
  listIdentityAwareProxyClientsAsync(
    request?: protos.google.cloud.iap.v1.IListIdentityAwareProxyClientsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.iap.v1.IIdentityAwareProxyClient> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    options = options || {};
    const defaultCallSettings = this._defaults['listIdentityAwareProxyClients'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listIdentityAwareProxyClients.asyncIterate(
      this.innerApiCalls['listIdentityAwareProxyClients'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.iap.v1.IIdentityAwareProxyClient>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.identityAwareProxyOAuthServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
